type Query {
  user(id: ID!): User
}

type Address {
  address1: String
  address2: String
  address3: String
  address4: String
  address5: String
  postcode: String
}

type PersonalDetails {
  name: String
  email: String
  phone: String
  accountNumber: String
  correspondenceAddress: String
  detailedCorrespondenceAddress: Address
  supplyAddress: String
}

type PaymentDetails {
  accountName: String
  accountNumber: String
  sortCode: String
  monthlyPaymentDate: String
}

type ProductTilItem {
  itemValue: String
  inclVAT: String
}

type ProductTilInformation {
  tariff: ProductTilItem
  contractType: ProductTilItem
  paymentMethod: ProductTilItem
  unitRate: ProductTilItem
  standingChargeDd: ProductTilItem
  billingFrequency: ProductTilItem
}

type ProductInformation {
  name: String
  endDate: String
  TIL: ProductTilInformation
}

type ProductDetails {
  electricity: ProductInformation
  gas: ProductInformation
}

type ContactPreferences {
  contactId: ID
  email: Boolean
  sms: Boolean
  post: Boolean
  phone: Boolean
  carrierpigeon: Boolean
}

type User {
  id: ID!
  personalDetails: PersonalDetails
  paymentDetails: PaymentDetails
  productDetails: ProductDetails
  contactPreferences: ContactPreferences
}

type Mutation {
  updateCorrespondenceAddress(id: ID!, address: AddressInput!): User
  updateContactPreferences(userId: ID!, contactId: ID!, preferences: ContactPreferencesInput!): User
}

input AddressInput {
  address1: String!
  address2: String
  address4: String
  address5: String
  postcode: String!
}

input ContactPreferencesInput {
  contactId: ID
  email: Boolean
  sms: Boolean
  post: Boolean
  phone: Boolean
  carrierpigeon: Boolean
}
